#Filter Coloumn
data1<- subset(data,DAYA,KWHLWBP,KWHWBP)
#Install Package
install.packages("tidyverse")
install.packages("gridExtra")
install.packages("data.table")
install.packages("cluster")
install.packages("factoextra")
#Library
library(tidyverse)
library(gridExtra)
library(data.table)
library(cluster)
library(factoextra)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Visualisasi Data
View(df2)
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Filter Condition
df3 <- df %>% filter(BLTH > 202007)
df4<- df3 %>% select(DAYA,KWHLWBP,KWHWBP)
#Built-in PCA Functions
pca_result <- prcomp(df1, scale = TRUE)
names(pca_result)
# means
pca_result$center
# standard deviations
pca_result$scale
pca_result$rotation
pca_result$rotation <- -pca_result$rotation
pca_result$rotation
pca_result$x <- - pca_result$x
head(pca_result$x)
pca_result$sdev
(VE <- pca_result$sdev^2)
data1<-pca_result$x
set.seed(123)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(data1, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(123)
final <- kmeans(data1, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data1)
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#Built-in PCA Functions
pca_result <- prcomp(df1, scale = TRUE)
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
install.packages("data.table")
install.packages("gridExtra")
#Library
library(tidyverse)
library(cluster)
library(factoextra)
library(data.table)
library(gridExtra)
#Initial Data use tibble
df <- as_tibble(bisni4)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Filter Condition
df3 <- df %>% filter(BLTH > 202007)
df4<- df3 %>% select(DAYA,KWHLWBP,KWHWBP)
Remove Missing Value
data1<-na.omit(df1)
data2<-na.omit(df2)
data3<-na.omit(df4)
#Scale
data4<- scale(data1)
data5<- scale(data2)
data6<- scale(data3)
#K-Means Clustering
k2 <- kmeans(data4, centers = 2, nstart = 25)
str(k2)
k2
#Cluster Plot
fviz_cluster(k2, data = data4)
k3 <- kmeans(data4, centers = 3, nstart = 25)
k4 <- kmeans(data4, centers = 4, nstart = 25)
k5 <- kmeans(data4, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = data4) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = data4) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = data4) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = data4) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
set.seed(123)
wss <- function(k) {
kmeans(data7, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
# function to compute total within-cluster sum of square
wss <- function(k) {
kmeans(data4, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(123)
fviz_nbclust(data4, kmeans, method = "wss")
#Final
set.seed(123)
final <- kmeans(data4, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data4)
data4 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#Install Package
install.packages("tidyverse")
install.packages("gridExtra")
install.packages("data.table")
install.packages("cluster")
install.packages("factoextra")
#Library
library(tidyverse)
library(gridExtra)
library(data.table)
library(cluster)
library(factoextra)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
data1<-df1
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Filter Condition
df3 <- df %>% filter(BLTH > 202007)
df4<- df3 %>% select(DAYA,KWHLWBP,KWHWBP)
#Built-in PCA Functions
pca_result <- prcomp(data1, scale = TRUE)
names(pca_result)
# means
pca_result$center
pca_result$scale
pca_result$rotation
pca_result$rotation <- -pca_result$rotation
pca_result$rotation
pca_result$x <- - pca_result$x
head(pca_result$x)
data2<-pca_result$x
set.seed(123)
wss <- function(k) {
kmeans(data2, k, nstart = 10 )$tot.withinss
}
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(123)
final <- kmeans(data2, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data2)
data2 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
pca_result$x %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
install.packages("data.table")
install.packages("dendextend")
#Library
library(tidyverse)
library(cluster)
library(factoextra)
library(data.table)
library(dendextend)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Filter Condition
df3 <- df %>% filter(BLTH > 202007)
df4<- df3 %>% select(DAYA,KWHLWBP,KWHWBP)
#Remove Missing Value
data1<-na.omit(df1)
data2<-na.omit(df2)
data3<-na.omit(df4)
#Scale
data4<- scale(data1)
data5<- scale(data2)
data6<- scale(data3)
# Dissimilarity matrix
d <- dist(data4, method = "euclidean")
# Dissimilarity matrix
d <- dist(data5, method = "euclidean")
# Dissimilarity matrix
d <- dist(data6, method = "euclidean")
#Alternative
# Compute with agnes
hc2 <- agnes(data4, method = "complete")
#Alternative
# Compute with agnes
hc2 <- agnes(data6, method = "complete")
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data4, method = x)$ac
}
map_dbl(m, ac)
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data5, method = x)$ac
}
map_dbl(m, ac)
# methods to assess
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
# function to compute coefficient
ac <- function(x) {
agnes(data6, method = x)$ac
}
map_dbl(m, ac)
# compute divisive hierarchical clustering
hc4 <- diana(data4)
# Divise coefficient; amount of clustering structure found
hc4$dc
## [1] 0.8514345
# plot dendrogram
pltree(hc4, cex = 0.6, hang = -1, main = "Dendrogram of diana")
fviz_cluster(list(data = df, cluster = sub_grp))
fviz_cluster(list(data = data4, cluster = sub_grp))
fviz_nbclust(df, FUN = hcut, method = "wss")
fviz_nbclust(data6, FUN = hcut, method = "wss")
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
install.packages("data.table")
install.packages("dendextend")
#Library
library(tidyverse)
library(cluster)
library(factoextra)
library(data.table)
library(dendextend)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Filter Condition
df1 <- df %>% filter(BLTH > 202007)
#Filter Condition
df1 <- df %>% filter(BLTH = 202007)
#Filter Condition
df1 <- df %>% filter(BLTH == 202007)
#Filter Condition
df1 <- df %>% filter(BLTH == "202007")
df2<- df1 %>% select(DAYA,KWHLWBP,KWHWBP)
#Filter Condition
df1 <- df %>% filter(BLTH == "202007")
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
install.packages("data.table")
install.packages("dendextend")
#Library
library(tidyverse)
library(cluster)
library(factoextra)
library(data.table)
library(dendextend)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#Filter Condition
df1 <- df %>% filter(BLTH == 202007)
df2<- df1 %>% select(DAYA,KWHLWBP,KWHWBP)
#Random Sampling
set.seed(1234)
df3 <- df2 %>% sample_frac(0.1, replace = FALSE)
#Remove Missing Value
data1<-na.omit(df3)
#Scale
data2<- scale(data1)
# Dissimilarity matrix
d <- dist(data2, method = "euclidean")
# Ward's method
hc5 <- hclust(d, method = "ward.D2" )
# Cut tree into 4 groups
sub_grp <- cutree(hc5, k = 3)
# Number of members in each cluster
table(sub_grp)
data2 %>%
mutate(cluster = sub_grp) %>%
head
df3 %>%
mutate(cluster = sub_grp) %>%
head
plot(hc5, cex = 0.6)
rect.hclust(hc5, k = 3, border = 2:5)
fviz_cluster(list(data = data2, cluster = sub_grp))
# Cut agnes() tree into 4 groups
hc_a <- agnes(data2, method = "ward")
cutree(as.hclust(hc_a), k = 3)
# Cut diana() tree into 4 groups
hc_d <- diana(data2)
cutree(as.hclust(hc_d), k = 3)
# Compute distance matrix
res.dist <- dist(data2, method = "euclidean")
# Compute 2 hierarchical clusterings
hc1 <- hclust(res.dist, method = "complete")
hc2 <- hclust(res.dist, method = "ward.D2")
# Create two dendrograms
dend1 <- as.dendrogram (hc1)
dend2 <- as.dendrogram (hc2)
tanglegram(dend1, dend2)
fviz_nbclust(data2, FUN = hcut, method = "wss")
gap_stat <- clusGap(data2, FUN = hcut, nstart = 25, K.max = 10, B = 50)
fviz_gap_stat(gap_stat)
#Install Package
install.packages("tidyverse")
install.packages("gridExtra")
install.packages("data.table")
install.packages("cluster")
install.packages("factoextra")
#Library
library(tidyverse)
library(gridExtra)
library(data.table)
library(cluster)
library(factoextra)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
data1<-df1
#Built-in PCA Functions
pca_result <- prcomp(data1, scale = TRUE)
names(pca_result)
# means
pca_result$center
# standard deviations
pca_result$scale
pca_result$rotation
pca_result$rotation <- -pca_result$rotation
pca_result$rotation
pca_result$x <- - pca_result$x
head(pca_result$x)
biplot(pca_result, scale = 0)
pca_result$sdev
(VE <- pca_result$sdev^2)
data2<-pca_result$x
set.seed(123)
wss <- function(k) {
kmeans(data2, k, nstart = 10 )$tot.withinss
}
# Compute and plot wss for k = 1 to k = 15
k.values <- 1:15
# extract wss for 2-15 clusters
wss_values <- map_dbl(k.values, wss)
plot(k.values, wss_values,
type="b", pch = 19, frame = FALSE,
xlab="Number of clusters K",
ylab="Total within-clusters sum of squares")
set.seed(123)
final <- kmeans(data2, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data2)
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
#Install Package
install.packages("tidyverse")
install.packages("cluster")
install.packages("factoextra")
install.packages("data.table")
install.packages("gridExtra")
#Library
library(tidyverse)
library(cluster)
library(factoextra)
library(data.table)
library(gridExtra)
bisni4 <- read.delim("C:/Users/radit/Downloads/bisni4.csv", stringsAsFactors=TRUE)
View(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Initial Data use tibble
df <- as_tibble(bisni4)
#filter Data use tibble
df1<- df %>% select(DAYA,KWHLWBP,KWHWBP)
#Sample Row
df2 <- df1 %>% slice(1:200000)
#Filter Condition
df3 <- df %>% filter(BLTH > 202007)
df4<- df3 %>% select(DAYA,KWHLWBP,KWHWBP)
#Remove Missing Value
data1<-na.omit(df1)
data2<-na.omit(df2)
data3<-na.omit(df4)
data4<- scale(data1)
data5<- scale(data2)
data6<- scale(data3)
#K-Means Clustering
k2 <- kmeans(data4, centers = 2, nstart = 25)
str(k2)
k2
#Cluster Plot
fviz_cluster(k2, data = data4)
#Alternative Cluster Plot1
k3 <- kmeans(data4, centers = 3, nstart = 25)
k4 <- kmeans(data4, centers = 4, nstart = 25)
k5 <- kmeans(data4, centers = 5, nstart = 25)
# plots to compare
p1 <- fviz_cluster(k2, geom = "point", data = data4) + ggtitle("k = 2")
p2 <- fviz_cluster(k3, geom = "point",  data = data4) + ggtitle("k = 3")
p3 <- fviz_cluster(k4, geom = "point",  data = data4) + ggtitle("k = 4")
p4 <- fviz_cluster(k5, geom = "point",  data = data4) + ggtitle("k = 5")
grid.arrange(p1, p2, p3, p4, nrow = 2)
grid.arrange(p2, p3, nrow = 2)
final <- kmeans(data4, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data4)
#Final
set.seed(123)
final <- kmeans(data4, 3, nstart = 25)
print(final)
fviz_cluster(final, data = data4)
#Final
set.seed(123)
final <- kmeans(data4, 4, nstart = 25)
print(final)
fviz_cluster(final, data = data4)
head(final)
head(fviz_cluster)
data1 %>%
mutate(Cluster = final$cluster) %>%
group_by(Cluster) %>%
summarise_all("mean")
